# Mock Storage Service Tests
test_that("Mock.Storage.Service() should throw error when no configuration argument provided", {
  # Given
  error <- "No configuration provided but required. Provide configuration"

  # Then
  Mock.Storage.Service() |>
    expect_error(error)
})
test_that("Mock.Storage.Service() should not throw error when configuraiton argument provided",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  # Then
  configuration |>
    Mock.Storage.Service() |>
    expect_no_error()
})


test_that("todo |> mock[['Todo']][['Insert']]() should return empty data frame todo is new",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock       <- configuration |> Mock.Storage.Service()

  new.todo <- data.frame(
    Id     = UUIDgenerate(),
    Task   = 'Task.x',
    Status = 'New'
  )

  # When
  response <- new.todo |> mock[['Todo']][['Insert']]()

  # Then
  response |>
    nrow() |>
    expect_equal(0)
})





test_that("mock[['Todo']][['Select']]() returns data frame",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock <- configuration |> Mock.Storage.Service()

  # When
  todos <- mock[['Todo']][['Select']]()

  # Then
  todos |>
    is.data.frame() |>
    expect_equal(TRUE)
})
test_that("id |> mock[['Todo']][['SelectWhereId']]() should return todo with matching id if exist",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock          <- configuration |> Mock.Storage.Service()
  existing.todo <- mock[['Todo']][['Select']]() |> head(1)
  existing.id   <- existing.todo[["Id"]]

  input.id    <- existing.id
  expected.id <- input.id

  # When
  retrieved.todo <- input.id |> mock[['Todo']][['SelectWhereId']]()

  # Then
  retrieved.todo[["Id"]] |>
    expect_equal(expected.id)
})
test_that("id |> mock[['Todo']][['SelectWhereId']]() should return empty data frame if todo not exist",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock <- configuration |> Mock.Storage.Service()

  random.id <- UUIDgenerate()
  input.id  <- random.id

  # When
  retrieved.todo <- input.id |> mock[['Todo']][['SelectWhereId']]()

  # Then
  retrieved.todo |>
    nrow() |>
    expect_equal(0)
})
test_that("id |> mock[['Todo']][['Delete']]() should return empty data frame",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock <- configuration |> Mock.Storage.Service()

  random.id <- UUIDgenerate()
  input.id  <- random.id

  # When
  response <- input.id |> mock[['Todo']][['Delete']]()

  # Then
  response |>
    nrow() |>
    expect_equal(0)
})
test_that("todo |> mock[['Todo']][['Update']]() should return empty data frame ",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock          <- configuration |> Mock.Storage.Service()
  existing.todo <- mock[['Todo']][['Select']]() |> tail(1)

  updated.todo             <- existing.todo
  updated.todo[["Status"]] <- 'New'

  expected.todo <- updated.todo

  # When
  response <- updated.todo |> mock[['Todo']][['Update']]()

  # Then
  response |>
    nrow() |>
    expect_equal(0)
})

test_that("todo |> mock[['Todo']][['Insert']]() should throw error when todo already exsit",{
  # Given
  configuration.utility <- Configuration.Utility.Broker()
  configuration <- configuration.utility[["GetConfiguration"]]()

  mock          <- configuration |> Mock.Storage.Service()
  existing.todo <- mock[['Todo']][['Select']]() |> tail(1)

  error <- "SQL Error: Duplicate Id not allowed"

  # Then
  existing.todo |>
    mock[['Todo']][['Insert']]() |>
    expect_error(error)
})



